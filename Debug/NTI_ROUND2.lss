
NTI_ROUND2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800064  00800064  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001644  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb8  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9f  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00003680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8e  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cdf  00000000  00000000  00004582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005261  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_1>
   8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_2>
   c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_10>
  2c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	u8 duty  = 0 ;
	dio_vidConfigChannel(DIO_PORTB , DIO_PIN3, OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 93 00 	call	0x126	; 0x126 <dio_vidConfigChannel>
	
	TIMER0_void_Init();
  9c:	0e 94 75 01 	call	0x2ea	; 0x2ea <TIMER0_void_Init>

	
	while (1)
	{
		for(duty=0; duty<255; duty++)
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	0a c0       	rjmp	.+20     	; 0xb8 <main+0x26>
		{
			TIMER0_void_SetCompareVal(duty);  /*increase the LED light intensity*/
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 bd 01 	call	0x37a	; 0x37a <TIMER0_void_SetCompareVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	9c e7       	ldi	r25, 0x7C	; 124
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
	TIMER0_void_Init();

	
	while (1)
	{
		for(duty=0; duty<255; duty++)
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	cf 3f       	cpi	r28, 0xFF	; 255
  ba:	a1 f7       	brne	.-24     	; 0xa4 <main+0x12>
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <main+0x40>
			TIMER0_void_SetCompareVal(duty);  /*increase the LED light intensity*/
			_delay_ms(8);
		}
		for(duty=255; duty>1; duty--)
		{
			TIMER0_void_SetCompareVal(duty);  /*decrease the LED light intensity*/
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 bd 01 	call	0x37a	; 0x37a <TIMER0_void_SetCompareVal>
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	9c e7       	ldi	r25, 0x7C	; 124
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3c>
  ce:	00 00       	nop
		for(duty=0; duty<255; duty++)
		{
			TIMER0_void_SetCompareVal(duty);  /*increase the LED light intensity*/
			_delay_ms(8);
		}
		for(duty=255; duty>1; duty--)
  d0:	c1 50       	subi	r28, 0x01	; 1
  d2:	c2 30       	cpi	r28, 0x02	; 2
  d4:	a0 f7       	brcc	.-24     	; 0xbe <main+0x2c>
  d6:	e4 cf       	rjmp	.-56     	; 0xa0 <main+0xe>

000000d8 <__vector_16>:
}



void __vector_16(void)   // ADC ISR
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	(*Global_ADC) ();
  fa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
  fe:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 102:	09 95       	icall
	
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	7f 91       	pop	r23
 112:	6f 91       	pop	r22
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <dio_vidConfigChannel>:
/*****************************************************************/


void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	01 f1       	breq	.+64     	; 0x16a <dio_vidConfigChannel+0x44>
 12a:	30 f0       	brcs	.+12     	; 0x138 <dio_vidConfigChannel+0x12>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	b1 f1       	breq	.+108    	; 0x19c <dio_vidConfigChannel+0x76>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	09 f4       	brne	.+2      	; 0x136 <dio_vidConfigChannel+0x10>
 134:	4c c0       	rjmp	.+152    	; 0x1ce <dio_vidConfigChannel+0xa8>
 136:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	59 f4       	brne	.+22     	; 0x152 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 13c:	2a b3       	in	r18, 0x1a	; 26
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0x22>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0x1e>
 14c:	82 2b       	or	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <dio_vidConfigChannel+0x38>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <dio_vidConfigChannel+0x34>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	8a bb       	out	0x1a, r24	; 26
 168:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 16e:	27 b3       	in	r18, 0x17	; 23
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <dio_vidConfigChannel+0x54>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <dio_vidConfigChannel+0x50>
 17e:	82 2b       	or	r24, r18
 180:	87 bb       	out	0x17, r24	; 23
 182:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 184:	27 b3       	in	r18, 0x17	; 23
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <dio_vidConfigChannel+0x6a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <dio_vidConfigChannel+0x66>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	87 bb       	out	0x17, r24	; 23
 19a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <dio_vidConfigChannel+0x86>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <dio_vidConfigChannel+0x82>
 1b0:	82 2b       	or	r24, r18
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 1b6:	24 b3       	in	r18, 0x14	; 20
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <dio_vidConfigChannel+0x9c>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <dio_vidConfigChannel+0x98>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	84 bb       	out	0x14, r24	; 20
 1cc:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 1d2:	21 b3       	in	r18, 0x11	; 17
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <dio_vidConfigChannel+0xb8>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <dio_vidConfigChannel+0xb4>
 1e2:	82 2b       	or	r24, r18
 1e4:	81 bb       	out	0x11, r24	; 17
 1e6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 1e8:	21 b3       	in	r18, 0x11	; 17
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <dio_vidConfigChannel+0xce>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <dio_vidConfigChannel+0xca>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	81 bb       	out	0x11, r24	; 17
 1fe:	08 95       	ret

00000200 <__vector_1>:


/** Linker Problem solved */

void __vector_1(void)   // INT0 ISR
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	(*GLOBAL_EXT0) ();
 222:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <GLOBAL_EXT0>
 226:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <GLOBAL_EXT0+0x1>
 22a:	09 95       	icall
	
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_2>:

void __vector_2(void)   // INT1 ISR
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	 (*GLOBAL_EXT1) ();
 270:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GLOBAL_EXT1>
 274:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GLOBAL_EXT1+0x1>
 278:	09 95       	icall
	
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_3>:

void __vector_3(void)   // INT1 ISR
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	(*GLOBAL_EXT2) ();
 2be:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GLOBAL_EXT2>
 2c2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GLOBAL_EXT2+0x1>
 2c6:	09 95       	icall
	
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <TIMER0_void_Init>:
/*     				 initialized 							    */
/****************************************************************/

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 2ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	d9 f0       	breq	.+54     	; 0x328 <TIMER0_void_Init+0x3e>
 2f2:	28 f0       	brcs	.+10     	; 0x2fe <TIMER0_void_Init+0x14>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	51 f0       	breq	.+20     	; 0x30c <TIMER0_void_Init+0x22>
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	79 f0       	breq	.+30     	; 0x31a <TIMER0_void_Init+0x30>
 2fc:	1b c0       	rjmp	.+54     	; 0x334 <TIMER0_void_Init+0x4a>
 2fe:	83 b7       	in	r24, 0x33	; 51
 300:	8f 7b       	andi	r24, 0xBF	; 191
 302:	83 bf       	out	0x33, r24	; 51
 304:	83 b7       	in	r24, 0x33	; 51
 306:	87 7f       	andi	r24, 0xF7	; 247
 308:	83 bf       	out	0x33, r24	; 51
 30a:	14 c0       	rjmp	.+40     	; 0x334 <TIMER0_void_Init+0x4a>
 30c:	83 b7       	in	r24, 0x33	; 51
 30e:	8f 7b       	andi	r24, 0xBF	; 191
 310:	83 bf       	out	0x33, r24	; 51
 312:	83 b7       	in	r24, 0x33	; 51
 314:	88 60       	ori	r24, 0x08	; 8
 316:	83 bf       	out	0x33, r24	; 51
 318:	0d c0       	rjmp	.+26     	; 0x334 <TIMER0_void_Init+0x4a>
 31a:	83 b7       	in	r24, 0x33	; 51
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	83 bf       	out	0x33, r24	; 51
 320:	83 b7       	in	r24, 0x33	; 51
 322:	88 60       	ori	r24, 0x08	; 8
 324:	83 bf       	out	0x33, r24	; 51
 326:	06 c0       	rjmp	.+12     	; 0x334 <TIMER0_void_Init+0x4a>
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	83 bf       	out	0x33, r24	; 51
 32e:	83 b7       	in	r24, 0x33	; 51
 330:	87 7f       	andi	r24, 0xF7	; 247
 332:	83 bf       	out	0x33, r24	; 51
 334:	83 b7       	in	r24, 0x33	; 51
 336:	88 7f       	andi	r24, 0xF8	; 248
 338:	83 bf       	out	0x33, r24	; 51
 33a:	93 b7       	in	r25, 0x33	; 51
 33c:	e0 e6       	ldi	r30, 0x60	; 96
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	81 81       	ldd	r24, Z+1	; 0x01
 342:	89 2b       	or	r24, r25
 344:	83 bf       	out	0x33, r24	; 51
 346:	83 b7       	in	r24, 0x33	; 51
 348:	8f 7c       	andi	r24, 0xCF	; 207
 34a:	83 bf       	out	0x33, r24	; 51
 34c:	23 b7       	in	r18, 0x33	; 51
 34e:	92 81       	ldd	r25, Z+2	; 0x02
 350:	30 e1       	ldi	r19, 0x10	; 16
 352:	93 9f       	mul	r25, r19
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	82 2b       	or	r24, r18
 35a:	83 bf       	out	0x33, r24	; 51
 35c:	89 b7       	in	r24, 0x39	; 57
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	89 bf       	out	0x39, r24	; 57
 362:	89 b7       	in	r24, 0x39	; 57
 364:	8d 7f       	andi	r24, 0xFD	; 253
 366:	89 bf       	out	0x39, r24	; 57
 368:	88 b7       	in	r24, 0x38	; 56
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	88 bf       	out	0x38, r24	; 56
 36e:	88 b7       	in	r24, 0x38	; 56
 370:	82 60       	ori	r24, 0x02	; 2
 372:	88 bf       	out	0x38, r24	; 56
 374:	12 be       	out	0x32, r1	; 50
 376:	1c be       	out	0x3c, r1	; 60
 378:	08 95       	ret

0000037a <TIMER0_void_SetCompareVal>:
 37a:	8c bf       	out	0x3c, r24	; 60
 37c:	08 95       	ret

0000037e <__vector_11>:

/** Linker Problem solved */


void __vector_11(void)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 3a0:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TIMER0_OV_CallBack>
 3a4:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TIMER0_OV_CallBack+0x1>
 3a8:	09 95       	icall
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_10>:


void __vector_10(void)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 3ee:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <TIMER0_CTC_CallBack>
 3f2:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <TIMER0_CTC_CallBack+0x1>
 3f6:	09 95       	icall
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
