
NTI_ROUND2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000008a0  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800072  00800072  00000946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024a1  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eee  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001287  00000000  00000000  00003f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  0000520c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc8  00000000  00000000  00005790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001342  00000000  00000000  00006358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000769a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_1>
   8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_2>
   c:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_10>
  2c:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  8a:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC1>:
char String[5];
u16 ADCvalue , ADC_Flag ;

void ADC1(void){

	ADC_Flag = 1 ;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
  9a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
	
	if(Config_ADC[0].Adj == Right_Adjustment){
  9e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Config_ADC+0x1>
  a2:	81 11       	cpse	r24, r1
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <ADC1+0x22>
		ADCvalue = ADC ;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <ADCvalue+0x1>
  ae:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <ADCvalue>
  b2:	08 95       	ret
	}
	else if (Config_ADC[0].Adj == Left_Adjustment){
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	79 f4       	brne	.+30     	; 0xd6 <ADC1+0x44>
		ADCvalue = ADC >>6 ;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	00 24       	eor	r0, r0
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	00 1c       	adc	r0, r0
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	00 1c       	adc	r0, r0
  ca:	89 2f       	mov	r24, r25
  cc:	90 2d       	mov	r25, r0
  ce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <ADCvalue+0x1>
  d2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <ADCvalue>
  d6:	08 95       	ret

000000d8 <main>:

int main(void)
{

	
	dio_vidConfigChannel(DIO_PORTA , DIO_PIN0, INPUT);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	ADC_voidInit ();
  e2:	0e 94 1e 02 	call	0x43c	; 0x43c <ADC_voidInit>
	ADC_voidEnable();
  e6:	0e 94 3e 02 	call	0x47c	; 0x47c <ADC_voidEnable>
	ADC_voidInterrputEnable();
  ea:	0e 94 42 02 	call	0x484	; 0x484 <ADC_voidInterrputEnable>
	ADC_u8ReadADC(ADC1 , 0 );
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	89 e4       	ldi	r24, 0x49	; 73
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 4a 02 	call	0x494	; 0x494 <ADC_u8ReadADC>
	LCD_Init();
  f8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCD_Init>
	LCD_Set_Cursor(1, 1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_Set_Cursor>
	ADC_voidStartConversion();
 104:	0e 94 46 02 	call	0x48c	; 0x48c <ADC_voidStartConversion>
	while (1)
	{
		if(ADC_Flag == 1 ) {
 108:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 10c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	d1 f7       	brne	.-12     	; 0x108 <main+0x30>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 114:	4a e0       	ldi	r20, 0x0A	; 10
 116:	64 e7       	ldi	r22, 0x74	; 116
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <ADCvalue>
 11e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <ADCvalue+0x1>
 122:	0e 94 19 04 	call	0x832	; 0x832 <__itoa_ncheck>
			//Present on LCD
			itoa(ADCvalue,String,10);
			LCD_Write_String(String);
 126:	84 e7       	ldi	r24, 0x74	; 116
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	83 ed       	ldi	r24, 0xD3	; 211
 132:	90 e3       	ldi	r25, 0x30	; 48
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x5c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x66>
 13e:	00 00       	nop
			_delay_ms(1000);
			LCD_Write_String("  ");
 140:	8e e6       	ldi	r24, 0x6E	; 110
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Write_String>
			LCD_Set_Cursor(1, 1);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCD_Set_Cursor>
			
			ADC_voidStartConversion();
 150:	0e 94 46 02 	call	0x48c	; 0x48c <ADC_voidStartConversion>
			
			ADC_Flag = 0 ;
 154:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 158:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 15c:	d5 cf       	rjmp	.-86     	; 0x108 <main+0x30>

0000015e <LCD_DATA>:
/* Description    :  This function used to Send Data to LCD     */
/*					 Inputs : u8 data			     			*/
/*					 return : void		 						*/
/****************************************************************/

void LCD_DATA(u8 data){	
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
	if(data & 1)
 162:	80 ff       	sbrs	r24, 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <LCD_DATA+0x18>
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D4 , STD_HIGH );
 166:	e0 e6       	ldi	r30, 0x60	; 96
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	66 81       	ldd	r22, Z+6	; 0x06
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	81 81       	ldd	r24, Z+1	; 0x01
 170:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 174:	07 c0       	rjmp	.+14     	; 0x184 <LCD_DATA+0x26>
	else
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D4 , STD_LOW );
 176:	e0 e6       	ldi	r30, 0x60	; 96
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	66 81       	ldd	r22, Z+6	; 0x06
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	81 81       	ldd	r24, Z+1	; 0x01
 180:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
	if(data & 2)
 184:	c1 ff       	sbrs	r28, 1
 186:	08 c0       	rjmp	.+16     	; 0x198 <LCD_DATA+0x3a>
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D5 , STD_HIGH );
 188:	e0 e6       	ldi	r30, 0x60	; 96
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	67 81       	ldd	r22, Z+7	; 0x07
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	81 81       	ldd	r24, Z+1	; 0x01
 192:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <LCD_DATA+0x48>
	else
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D5 , STD_LOW );
 198:	e0 e6       	ldi	r30, 0x60	; 96
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	67 81       	ldd	r22, Z+7	; 0x07
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	81 81       	ldd	r24, Z+1	; 0x01
 1a2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
	if(data & 4)
 1a6:	c2 ff       	sbrs	r28, 2
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <LCD_DATA+0x5c>
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D6 , STD_HIGH );
 1aa:	e0 e6       	ldi	r30, 0x60	; 96
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	60 85       	ldd	r22, Z+8	; 0x08
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	81 81       	ldd	r24, Z+1	; 0x01
 1b4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <LCD_DATA+0x6a>
	else
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D6 , STD_LOW );
 1ba:	e0 e6       	ldi	r30, 0x60	; 96
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	60 85       	ldd	r22, Z+8	; 0x08
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	81 81       	ldd	r24, Z+1	; 0x01
 1c4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
	if(data & 8)
 1c8:	c3 ff       	sbrs	r28, 3
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <LCD_DATA+0x7e>
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D7 , STD_HIGH );
 1cc:	e0 e6       	ldi	r30, 0x60	; 96
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	61 85       	ldd	r22, Z+9	; 0x09
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <LCD_DATA+0x8c>
	else
	dio_vidWriteChannel(Config_LCD->LCD_DATA_PORT, Config_LCD->D7 , STD_LOW );
 1dc:	e0 e6       	ldi	r30, 0x60	; 96
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	61 85       	ldd	r22, Z+9	; 0x09
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
}
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <LCD_CMD>:
/* Description    :  This function used to Send Command to LCD  */
/*					 Inputs : unsigned char CMD					*/
/*					 return : void		 						*/
/****************************************************************/

void LCD_CMD(unsigned char CMD){
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	18 2f       	mov	r17, r24
	// Select Command Register
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->RS , STD_LOW );
 1f6:	c0 e6       	ldi	r28, 0x60	; 96
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	6d 81       	ldd	r22, Y+5	; 0x05
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	88 81       	ld	r24, Y
 200:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
	// Move The Command Data To LCD
	LCD_DATA(CMD);
 204:	81 2f       	mov	r24, r17
 206:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_DATA>
	// Send The EN Clock Signal
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , STD_HIGH);
 20a:	6c 81       	ldd	r22, Y+4	; 0x04
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	88 81       	ld	r24, Y
 210:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f ec       	ldi	r24, 0xCF	; 207
 216:	97 e0       	ldi	r25, 0x07	; 7
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_CMD+0x2a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_CMD+0x30>
 21e:	00 00       	nop
	_delay_us(500); 
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , STD_LOW);
 220:	6c 81       	ldd	r22, Y+4	; 0x04
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	88 81       	ld	r24, Y
 226:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	08 95       	ret

00000232 <LCD_Write_Char>:
/* Description    :  This function used to write character to LCD  */
/*					 Inputs : char Data				               */
/*					 return : void		 						   */
/*******************************************************************/

void LCD_Write_Char(char Data){
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
	char Low4,High4;
	Low4 = Data & 0x0F;
 23a:	08 2f       	mov	r16, r24
 23c:	0f 70       	andi	r16, 0x0F	; 15
	High4 = Data & 0xF0;
 23e:	18 2f       	mov	r17, r24
 240:	10 7f       	andi	r17, 0xF0	; 240
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->RS , STD_HIGH );  // select data mode
 242:	c0 e6       	ldi	r28, 0x60	; 96
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	6d 81       	ldd	r22, Y+5	; 0x05
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	88 81       	ld	r24, Y
 24c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
	LCD_DATA(High4>>4);
 250:	81 2f       	mov	r24, r17
 252:	82 95       	swap	r24
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_DATA>
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , STD_HIGH);
 25a:	6c 81       	ldd	r22, Y+4	; 0x04
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	88 81       	ld	r24, Y
 260:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 264:	8f ec       	ldi	r24, 0xCF	; 207
 266:	97 e0       	ldi	r25, 0x07	; 7
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_Write_Char+0x36>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_Write_Char+0x3c>
 26e:	00 00       	nop
	_delay_us(500); 
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , STD_LOW);
 270:	6c 81       	ldd	r22, Y+4	; 0x04
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	88 81       	ld	r24, Y
 276:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 27a:	8f ec       	ldi	r24, 0xCF	; 207
 27c:	97 e0       	ldi	r25, 0x07	; 7
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <LCD_Write_Char+0x4c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <LCD_Write_Char+0x52>
 284:	00 00       	nop
	_delay_us(500); 
	LCD_DATA(Low4);
 286:	80 2f       	mov	r24, r16
 288:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_DATA>
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , STD_HIGH);
 28c:	6c 81       	ldd	r22, Y+4	; 0x04
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	88 81       	ld	r24, Y
 292:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 296:	8f ec       	ldi	r24, 0xCF	; 207
 298:	97 e0       	ldi	r25, 0x07	; 7
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_Write_Char+0x68>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_Write_Char+0x6e>
 2a0:	00 00       	nop
	_delay_us(500); 
	dio_vidWriteChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , STD_LOW);
 2a2:	6c 81       	ldd	r22, Y+4	; 0x04
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	88 81       	ld	r24, Y
 2a8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <dio_vidWriteChannel>
 2ac:	8f ec       	ldi	r24, 0xCF	; 207
 2ae:	97 e0       	ldi	r25, 0x07	; 7
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Write_Char+0x7e>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Write_Char+0x84>
 2b6:	00 00       	nop
	_delay_us(500); 
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	08 95       	ret

000002c2 <LCD_Write_String>:
/* Description    :  This function used to write String to LCD     */
/*					 Inputs : char *str				               */
/*					 return : void		 						   */
/*******************************************************************/

void LCD_Write_String(char *str){
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!='\0';i++)
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <LCD_Write_String+0x16>
	LCD_Write_Char(str[i]);
 2d2:	0e 94 19 01 	call	0x232	; 0x232 <LCD_Write_Char>
/*					 return : void		 						   */
/*******************************************************************/

void LCD_Write_String(char *str){
	int i;
	for(i=0;str[i]!='\0';i++)
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	f8 01       	movw	r30, r16
 2da:	ec 0f       	add	r30, r28
 2dc:	fd 1f       	adc	r31, r29
 2de:	80 81       	ld	r24, Z
 2e0:	81 11       	cpse	r24, r1
 2e2:	f7 cf       	rjmp	.-18     	; 0x2d2 <LCD_Write_String+0x10>
	LCD_Write_Char(str[i]);
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <LCD_Clear>:
/*					 Inputs : void			                       */
/*					 return : void		 						   */
/*******************************************************************/

void LCD_Clear(){
	LCD_CMD(0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
 2fa:	08 95       	ret

000002fc <LCD_Init>:
/* Description    :  This function used to initialize LCD       */
/*					 Inputs : void				             	*/
/*					 return : void		 						*/
/****************************************************************/

void LCD_Init(){
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	// IO Pin Configurations
	
	 dio_vidConfigChannel(Config_LCD->LCD_DATA_PORT ,Config_LCD->D4 , OUTPUT);	
 300:	c0 e6       	ldi	r28, 0x60	; 96
 302:	d0 e0       	ldi	r29, 0x00	; 0
 304:	6e 81       	ldd	r22, Y+6	; 0x06
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	 dio_vidConfigChannel(Config_LCD->LCD_DATA_PORT ,Config_LCD->D5 , OUTPUT);	
 30e:	6f 81       	ldd	r22, Y+7	; 0x07
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	 dio_vidConfigChannel(Config_LCD->LCD_DATA_PORT ,Config_LCD->D6 , OUTPUT);	
 318:	68 85       	ldd	r22, Y+8	; 0x08
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	 dio_vidConfigChannel(Config_LCD->LCD_DATA_PORT ,Config_LCD->D7 , OUTPUT);
 322:	69 85       	ldd	r22, Y+9	; 0x09
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	 dio_vidConfigChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->RS , OUTPUT);	
 32c:	6d 81       	ldd	r22, Y+5	; 0x05
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	88 81       	ld	r24, Y
 332:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	 dio_vidConfigChannel(Config_LCD->LCD_Control_PORT ,Config_LCD->EN , OUTPUT);	
 336:	6c 81       	ldd	r22, Y+4	; 0x04
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	88 81       	ld	r24, Y
 33c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <dio_vidConfigChannel>
	// The Initiate Procedure
	LCD_DATA(0x00);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_DATA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	86 e7       	ldi	r24, 0x76	; 118
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <LCD_Init+0x50>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Init+0x5a>
 356:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_Init+0x60>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_Init+0x66>
 362:	00 00       	nop
	_delay_ms(30);  	
	_delay_us(500); 
	LCD_CMD(0x03);
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	8f e1       	ldi	r24, 0x1F	; 31
 36c:	9e e4       	ldi	r25, 0x4E	; 78
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_Init+0x72>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_Init+0x78>
 374:	00 00       	nop
	_delay_ms(5);
	LCD_CMD(0x03);
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	87 e5       	ldi	r24, 0x57	; 87
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_Init+0x84>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_Init+0x8a>
 386:	00 00       	nop
	_delay_us(150);
	LCD_CMD(0x03);
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x02);
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x02);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x08);
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x00);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x0C);
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x00);
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_CMD(0x06);
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	LCD_Clear();
 3b8:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Clear>
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <LCD_Set_Cursor>:
/*					 Inputs : unsigned char row	                   */
/*                            unsigned char column				   */
/*					 return : void		 						   */
/*******************************************************************/

void LCD_Set_Cursor(unsigned char r, unsigned char c) { // r = ROW , c = Column
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	c8 2f       	mov	r28, r24
 3ca:	d6 2f       	mov	r29, r22
	unsigned char Temp,Low4,High4;
	if(r == 1)
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	59 f4       	brne	.+22     	; 0x3e6 <LCD_Set_Cursor+0x24>
	{
		Temp = 0x80 + c - 1; //0x80 is used to move the cursor
 3d0:	8f e7       	ldi	r24, 0x7F	; 127
 3d2:	86 0f       	add	r24, r22
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
 3d4:	18 2f       	mov	r17, r24
 3d6:	1f 70       	andi	r17, 0x0F	; 15
		LCD_CMD(High4);
 3d8:	82 95       	swap	r24
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
		LCD_CMD(Low4);
 3e0:	81 2f       	mov	r24, r17
 3e2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	}
	if(r == 2)
 3e6:	c2 30       	cpi	r28, 0x02	; 2
 3e8:	59 f4       	brne	.+22     	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		Temp = 0xC0 + c - 1;
 3ea:	8f eb       	ldi	r24, 0xBF	; 191
 3ec:	8d 0f       	add	r24, r29
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
 3ee:	18 2f       	mov	r17, r24
 3f0:	1f 70       	andi	r17, 0x0F	; 15
		LCD_CMD(High4);
 3f2:	82 95       	swap	r24
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
		LCD_CMD(Low4);
 3fa:	81 2f       	mov	r24, r17
 3fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	}
	if(r == 3)
 400:	c3 30       	cpi	r28, 0x03	; 3
 402:	59 f4       	brne	.+22     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		Temp = 0x94 + c - 1;
 404:	83 e9       	ldi	r24, 0x93	; 147
 406:	8d 0f       	add	r24, r29
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
 408:	18 2f       	mov	r17, r24
 40a:	1f 70       	andi	r17, 0x0F	; 15
		LCD_CMD(High4);
 40c:	82 95       	swap	r24
 40e:	8f 70       	andi	r24, 0x0F	; 15
 410:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
		LCD_CMD(Low4);
 414:	81 2f       	mov	r24, r17
 416:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	}
	if(r == 4)
 41a:	c4 30       	cpi	r28, 0x04	; 4
 41c:	59 f4       	brne	.+22     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		Temp = 0xD4 + c - 1;
 41e:	83 ed       	ldi	r24, 0xD3	; 211
 420:	8d 0f       	add	r24, r29
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
 422:	c8 2f       	mov	r28, r24
 424:	cf 70       	andi	r28, 0x0F	; 15
		LCD_CMD(High4);
 426:	82 95       	swap	r24
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
		LCD_CMD(Low4);
 42e:	8c 2f       	mov	r24, r28
 430:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_CMD>
	}
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	08 95       	ret

0000043c <ADC_voidInit>:
	}
	
	return ADCvalue ;
	
	
}
 43c:	87 b1       	in	r24, 0x07	; 7
 43e:	8f 73       	andi	r24, 0x3F	; 63
 440:	87 b9       	out	0x07, r24	; 7
 442:	27 b1       	in	r18, 0x07	; 7
 444:	ea e6       	ldi	r30, 0x6A	; 106
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	90 81       	ld	r25, Z
 44a:	30 e4       	ldi	r19, 0x40	; 64
 44c:	93 9f       	mul	r25, r19
 44e:	c0 01       	movw	r24, r0
 450:	11 24       	eor	r1, r1
 452:	82 2b       	or	r24, r18
 454:	87 b9       	out	0x07, r24	; 7
 456:	87 b1       	in	r24, 0x07	; 7
 458:	8f 7d       	andi	r24, 0xDF	; 223
 45a:	87 b9       	out	0x07, r24	; 7
 45c:	27 b1       	in	r18, 0x07	; 7
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	30 e2       	ldi	r19, 0x20	; 32
 462:	93 9f       	mul	r25, r19
 464:	c0 01       	movw	r24, r0
 466:	11 24       	eor	r1, r1
 468:	82 2b       	or	r24, r18
 46a:	87 b9       	out	0x07, r24	; 7
 46c:	86 b1       	in	r24, 0x06	; 6
 46e:	88 7f       	andi	r24, 0xF8	; 248
 470:	86 b9       	out	0x06, r24	; 6
 472:	96 b1       	in	r25, 0x06	; 6
 474:	83 81       	ldd	r24, Z+3	; 0x03
 476:	89 2b       	or	r24, r25
 478:	86 b9       	out	0x06, r24	; 6
 47a:	08 95       	ret

0000047c <ADC_voidEnable>:
 47c:	86 b1       	in	r24, 0x06	; 6
 47e:	80 68       	ori	r24, 0x80	; 128
 480:	86 b9       	out	0x06, r24	; 6
 482:	08 95       	ret

00000484 <ADC_voidInterrputEnable>:
 484:	86 b1       	in	r24, 0x06	; 6
 486:	88 60       	ori	r24, 0x08	; 8
 488:	86 b9       	out	0x06, r24	; 6
 48a:	08 95       	ret

0000048c <ADC_voidStartConversion>:
 48c:	86 b1       	in	r24, 0x06	; 6
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	86 b9       	out	0x06, r24	; 6
 492:	08 95       	ret

00000494 <ADC_u8ReadADC>:
/*     				 initialized 							    */
/****************************************************************/

void ADC_u8ReadADC(void (*addresscpy)(void) , u8 channel ){
	
	 	 ADMUX &= ADMUX3_MASK ;
 494:	27 b1       	in	r18, 0x07	; 7
 496:	20 7e       	andi	r18, 0xE0	; 224
 498:	27 b9       	out	0x07, r18	; 7
	 	 ADMUX |= channel    ;  
 49a:	27 b1       	in	r18, 0x07	; 7
 49c:	62 2b       	or	r22, r18
 49e:	67 b9       	out	0x07, r22	; 7
	
     	Global_ADC = addresscpy ; 
 4a0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <Global_ADC+0x1>
 4a4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Global_ADC>
 4a8:	08 95       	ret

000004aa <__vector_16>:
}



void __vector_16(void)   // ADC ISR
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	(*Global_ADC) ();
 4cc:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <Global_ADC>
 4d0:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <Global_ADC+0x1>
 4d4:	09 95       	icall
	
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <dio_vidConfigChannel>:
/*****************************************************************/


void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	01 f1       	breq	.+64     	; 0x53c <dio_vidConfigChannel+0x44>
 4fc:	30 f0       	brcs	.+12     	; 0x50a <dio_vidConfigChannel+0x12>
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	b1 f1       	breq	.+108    	; 0x56e <dio_vidConfigChannel+0x76>
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	09 f4       	brne	.+2      	; 0x508 <dio_vidConfigChannel+0x10>
 506:	4c c0       	rjmp	.+152    	; 0x5a0 <dio_vidConfigChannel+0xa8>
 508:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	59 f4       	brne	.+22     	; 0x524 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 50e:	2a b3       	in	r18, 0x1a	; 26
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <dio_vidConfigChannel+0x22>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <dio_vidConfigChannel+0x1e>
 51e:	82 2b       	or	r24, r18
 520:	8a bb       	out	0x1a, r24	; 26
 522:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 524:	2a b3       	in	r18, 0x1a	; 26
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <dio_vidConfigChannel+0x38>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <dio_vidConfigChannel+0x34>
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	8a bb       	out	0x1a, r24	; 26
 53a:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	59 f4       	brne	.+22     	; 0x556 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 540:	27 b3       	in	r18, 0x17	; 23
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <dio_vidConfigChannel+0x54>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <dio_vidConfigChannel+0x50>
 550:	82 2b       	or	r24, r18
 552:	87 bb       	out	0x17, r24	; 23
 554:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 556:	27 b3       	in	r18, 0x17	; 23
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <dio_vidConfigChannel+0x6a>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <dio_vidConfigChannel+0x66>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	87 bb       	out	0x17, r24	; 23
 56c:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 56e:	41 30       	cpi	r20, 0x01	; 1
 570:	59 f4       	brne	.+22     	; 0x588 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 572:	24 b3       	in	r18, 0x14	; 20
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <dio_vidConfigChannel+0x86>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <dio_vidConfigChannel+0x82>
 582:	82 2b       	or	r24, r18
 584:	84 bb       	out	0x14, r24	; 20
 586:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 588:	24 b3       	in	r18, 0x14	; 20
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <dio_vidConfigChannel+0x9c>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <dio_vidConfigChannel+0x98>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	84 bb       	out	0x14, r24	; 20
 59e:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	59 f4       	brne	.+22     	; 0x5ba <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 5a4:	21 b3       	in	r18, 0x11	; 17
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <dio_vidConfigChannel+0xb8>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <dio_vidConfigChannel+0xb4>
 5b4:	82 2b       	or	r24, r18
 5b6:	81 bb       	out	0x11, r24	; 17
 5b8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 5ba:	21 b3       	in	r18, 0x11	; 17
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <dio_vidConfigChannel+0xce>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <dio_vidConfigChannel+0xca>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	81 bb       	out	0x11, r24	; 17
 5d0:	08 95       	ret

000005d2 <dio_vidWriteChannel>:
/*					 return : void		 						 */
/*****************************************************************/

void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	01 f1       	breq	.+64     	; 0x616 <dio_vidWriteChannel+0x44>
 5d6:	30 f0       	brcs	.+12     	; 0x5e4 <dio_vidWriteChannel+0x12>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	b1 f1       	breq	.+108    	; 0x648 <dio_vidWriteChannel+0x76>
 5dc:	83 30       	cpi	r24, 0x03	; 3
 5de:	09 f4       	brne	.+2      	; 0x5e2 <dio_vidWriteChannel+0x10>
 5e0:	4c c0       	rjmp	.+152    	; 0x67a <dio_vidWriteChannel+0xa8>
 5e2:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 5e4:	41 11       	cpse	r20, r1
 5e6:	0c c0       	rjmp	.+24     	; 0x600 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 5e8:	2b b3       	in	r18, 0x1b	; 27
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <dio_vidWriteChannel+0x22>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <dio_vidWriteChannel+0x1e>
 5f8:	80 95       	com	r24
 5fa:	82 23       	and	r24, r18
 5fc:	8b bb       	out	0x1b, r24	; 27
 5fe:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 600:	2b b3       	in	r18, 0x1b	; 27
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <dio_vidWriteChannel+0x3a>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <dio_vidWriteChannel+0x36>
 610:	82 2b       	or	r24, r18
 612:	8b bb       	out	0x1b, r24	; 27
 614:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 616:	41 11       	cpse	r20, r1
 618:	0c c0       	rjmp	.+24     	; 0x632 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 61a:	28 b3       	in	r18, 0x18	; 24
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <dio_vidWriteChannel+0x54>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <dio_vidWriteChannel+0x50>
 62a:	80 95       	com	r24
 62c:	82 23       	and	r24, r18
 62e:	88 bb       	out	0x18, r24	; 24
 630:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 632:	28 b3       	in	r18, 0x18	; 24
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <dio_vidWriteChannel+0x6c>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <dio_vidWriteChannel+0x68>
 642:	82 2b       	or	r24, r18
 644:	88 bb       	out	0x18, r24	; 24
 646:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 648:	41 11       	cpse	r20, r1
 64a:	0c c0       	rjmp	.+24     	; 0x664 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 64c:	25 b3       	in	r18, 0x15	; 21
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <dio_vidWriteChannel+0x86>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <dio_vidWriteChannel+0x82>
 65c:	80 95       	com	r24
 65e:	82 23       	and	r24, r18
 660:	85 bb       	out	0x15, r24	; 21
 662:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 664:	25 b3       	in	r18, 0x15	; 21
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <dio_vidWriteChannel+0x9e>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <dio_vidWriteChannel+0x9a>
 674:	82 2b       	or	r24, r18
 676:	85 bb       	out	0x15, r24	; 21
 678:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 67a:	41 11       	cpse	r20, r1
 67c:	0c c0       	rjmp	.+24     	; 0x696 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 67e:	22 b3       	in	r18, 0x12	; 18
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <dio_vidWriteChannel+0xb8>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <dio_vidWriteChannel+0xb4>
 68e:	80 95       	com	r24
 690:	82 23       	and	r24, r18
 692:	82 bb       	out	0x12, r24	; 18
 694:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 696:	22 b3       	in	r18, 0x12	; 18
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <dio_vidWriteChannel+0xd0>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <dio_vidWriteChannel+0xcc>
 6a6:	82 2b       	or	r24, r18
 6a8:	82 bb       	out	0x12, r24	; 18
 6aa:	08 95       	ret

000006ac <__vector_1>:


/** Linker Problem solved */

void __vector_1(void)   // INT0 ISR
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	(*GLOBAL_EXT0) ();
 6ce:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <GLOBAL_EXT0>
 6d2:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <GLOBAL_EXT0+0x1>
 6d6:	09 95       	icall
	
}
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_2>:

void __vector_2(void)   // INT1 ISR
{
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
	 (*GLOBAL_EXT1) ();
 71c:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <GLOBAL_EXT1>
 720:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <GLOBAL_EXT1+0x1>
 724:	09 95       	icall
	
}
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	7f 91       	pop	r23
 734:	6f 91       	pop	r22
 736:	5f 91       	pop	r21
 738:	4f 91       	pop	r20
 73a:	3f 91       	pop	r19
 73c:	2f 91       	pop	r18
 73e:	0f 90       	pop	r0
 740:	0f be       	out	0x3f, r0	; 63
 742:	0f 90       	pop	r0
 744:	1f 90       	pop	r1
 746:	18 95       	reti

00000748 <__vector_3>:

void __vector_3(void)   // INT1 ISR
{
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	11 24       	eor	r1, r1
 752:	2f 93       	push	r18
 754:	3f 93       	push	r19
 756:	4f 93       	push	r20
 758:	5f 93       	push	r21
 75a:	6f 93       	push	r22
 75c:	7f 93       	push	r23
 75e:	8f 93       	push	r24
 760:	9f 93       	push	r25
 762:	af 93       	push	r26
 764:	bf 93       	push	r27
 766:	ef 93       	push	r30
 768:	ff 93       	push	r31
	(*GLOBAL_EXT2) ();
 76a:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <GLOBAL_EXT2>
 76e:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <GLOBAL_EXT2+0x1>
 772:	09 95       	icall
	
}
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_11>:

/** Linker Problem solved */


void __vector_11(void)
{
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 7b8:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <TIMER0_OV_CallBack>
 7bc:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <TIMER0_OV_CallBack+0x1>
 7c0:	09 95       	icall
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <__vector_10>:


void __vector_10(void)
{
 7e4:	1f 92       	push	r1
 7e6:	0f 92       	push	r0
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	0f 92       	push	r0
 7ec:	11 24       	eor	r1, r1
 7ee:	2f 93       	push	r18
 7f0:	3f 93       	push	r19
 7f2:	4f 93       	push	r20
 7f4:	5f 93       	push	r21
 7f6:	6f 93       	push	r22
 7f8:	7f 93       	push	r23
 7fa:	8f 93       	push	r24
 7fc:	9f 93       	push	r25
 7fe:	af 93       	push	r26
 800:	bf 93       	push	r27
 802:	ef 93       	push	r30
 804:	ff 93       	push	r31
	
	TIMER0_CTC_CallBack();
 806:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <TIMER0_CTC_CallBack>
 80a:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <TIMER0_CTC_CallBack+0x1>
 80e:	09 95       	icall
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <__itoa_ncheck>:
 832:	bb 27       	eor	r27, r27
 834:	4a 30       	cpi	r20, 0x0A	; 10
 836:	31 f4       	brne	.+12     	; 0x844 <__itoa_ncheck+0x12>
 838:	99 23       	and	r25, r25
 83a:	22 f4       	brpl	.+8      	; 0x844 <__itoa_ncheck+0x12>
 83c:	bd e2       	ldi	r27, 0x2D	; 45
 83e:	90 95       	com	r25
 840:	81 95       	neg	r24
 842:	9f 4f       	sbci	r25, 0xFF	; 255
 844:	0c 94 25 04 	jmp	0x84a	; 0x84a <__utoa_common>

00000848 <__utoa_ncheck>:
 848:	bb 27       	eor	r27, r27

0000084a <__utoa_common>:
 84a:	fb 01       	movw	r30, r22
 84c:	55 27       	eor	r21, r21
 84e:	aa 27       	eor	r26, r26
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	aa 1f       	adc	r26, r26
 856:	a4 17       	cp	r26, r20
 858:	10 f0       	brcs	.+4      	; 0x85e <__utoa_common+0x14>
 85a:	a4 1b       	sub	r26, r20
 85c:	83 95       	inc	r24
 85e:	50 51       	subi	r21, 0x10	; 16
 860:	b9 f7       	brne	.-18     	; 0x850 <__utoa_common+0x6>
 862:	a0 5d       	subi	r26, 0xD0	; 208
 864:	aa 33       	cpi	r26, 0x3A	; 58
 866:	08 f0       	brcs	.+2      	; 0x86a <__stack+0xb>
 868:	a9 5d       	subi	r26, 0xD9	; 217
 86a:	a1 93       	st	Z+, r26
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	79 f7       	brne	.-34     	; 0x84e <__utoa_common+0x4>
 870:	b1 11       	cpse	r27, r1
 872:	b1 93       	st	Z+, r27
 874:	11 92       	st	Z+, r1
 876:	cb 01       	movw	r24, r22
 878:	0c 94 3e 04 	jmp	0x87c	; 0x87c <strrev>

0000087c <strrev>:
 87c:	dc 01       	movw	r26, r24
 87e:	fc 01       	movw	r30, r24
 880:	67 2f       	mov	r22, r23
 882:	71 91       	ld	r23, Z+
 884:	77 23       	and	r23, r23
 886:	e1 f7       	brne	.-8      	; 0x880 <strrev+0x4>
 888:	32 97       	sbiw	r30, 0x02	; 2
 88a:	04 c0       	rjmp	.+8      	; 0x894 <strrev+0x18>
 88c:	7c 91       	ld	r23, X
 88e:	6d 93       	st	X+, r22
 890:	70 83       	st	Z, r23
 892:	62 91       	ld	r22, -Z
 894:	ae 17       	cp	r26, r30
 896:	bf 07       	cpc	r27, r31
 898:	c8 f3       	brcs	.-14     	; 0x88c <strrev+0x10>
 89a:	08 95       	ret

0000089c <_exit>:
 89c:	f8 94       	cli

0000089e <__stop_program>:
 89e:	ff cf       	rjmp	.-2      	; 0x89e <__stop_program>
